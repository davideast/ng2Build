{"version":3,"file":"/Users/deast/Angular/angular/modules/benchmarks_external/src/tree/tree_benchmark.es6","sources":["@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/12","tree_benchmark.es6","@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/8","@traceur/generated/TemplateParser/14"],"names":[],"mappings":"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","sourceRoot":"/Users/deast/Angular/angular/modules/benchmarks_external/src/tree/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","// tree benchmark in AngularJS 1.x\nimport {getIntParameter, bindAction} from 'e2e_test_lib/benchmark_util';\n\nexport function main() {\n  angular.bootstrap(document.querySelector('tree'), ['app']);\n}\n\nangular.module('app', [])\n.directive('tree', function() {\n  return {\n    scope: {\n      data: '='\n    },\n    template:\n'<span> {{data.value}}'+\n'  <span tree-if=\"data.left\"></span>'+\n'  <span tree-if=\"data.right\"></span>'+\n'</span>'\n    };\n})\n// special directive for \"if\" as angular 1.3 does not support\n// recursive components.\n.directive('treeIf', ['$compile', '$parse', function($compile, $parse) {\n  var transcludeFn;\n  return {\n    compile: function(element, attrs) {\n      var expr = $parse(attrs.treeIf);\n      var template = '<tree data=\"'+attrs.treeIf+'\"></tree>';\n      var transclude;\n      return function($scope, $element, $attrs) {\n        if (!transclude) {\n          transclude = $compile(template);\n        }\n        var childScope;\n        var childElement;\n        $scope.$watch(expr, function(newValue) {\n          if (childScope) {\n            childScope.$destroy();\n            childElement.remove();\n            childScope = null;\n            childElement = null;\n          }\n          if (newValue) {\n            childScope = $scope.$new();\n            childElement = transclude(childScope, function(clone) {\n              $element.append(clone);\n            });\n          }\n        });\n      }\n\n    }\n  }\n}])\n.config(['$compileProvider', function($compileProvider) {\n  $compileProvider.debugInfoEnabled(false);\n}])\n.run(['$rootScope', function($rootScope) {\n  var count = 0;\n  var maxDepth = getIntParameter('depth');\n\n  bindAction('#destroyDom', destroyDom);\n  bindAction('#createDom', createDom);\n\n  function destroyDom() {\n    $rootScope.$apply(function() {\n      $rootScope.initData = new TreeNode('', null, null);\n    });\n  }\n\n  function createDom() {\n    var values = count++ % 2 == 0 ?\n      ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '*'] :\n      ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', '-'];\n\n    $rootScope.$apply(function() {\n      $rootScope.initData = buildTree(maxDepth, values, 0);\n    });\n  }\n}]);\n\nclass TreeNode {\n  value:string;\n  left:TreeNode;\n  right:TreeNode;\n  constructor(value, left, right) {\n    this.value = value;\n    this.left = left;\n    this.right = right;\n  }\n}\n\nfunction buildTree(maxDepth, values, curDepth) {\n  if (maxDepth === curDepth) return new TreeNode('', null, null);\n  return new TreeNode(\n      values[curDepth],\n      buildTree(maxDepth, values, curDepth+1),\n      buildTree(maxDepth, values, curDepth+1));\n}\n\n\n\n","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function(m) {\n          $__placeholder__0\n        }","$__placeholder__0 = m.$__placeholder__1;","$__placeholder__0 = $__placeholder__1","function() {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4);\n        }()"]}