{"version":3,"file":"/Users/deast/Angular/angular/modules/core/src/compiler/pipeline/directive_parser.js","sources":["@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/12","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/9","@traceur/generated/TemplateParser/7","@traceur/generated/TemplateParser/20","directive_parser.js","@traceur/generated/TemplateParser/2"],"names":[],"mappings":"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","sourceRoot":"/Users/deast/Angular/angular/modules/core/src/compiler/pipeline/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function(m) {\n          $__placeholder__0\n        }","$__placeholder__0 = m.$__placeholder__1;","var $__placeholder__0 = $__export($__placeholder__1, $__placeholder__2);","function($__super) {\n          var $__placeholder__0 = $__placeholder__1;\n          return ($traceurRuntime.createClass)($__placeholder__2, $__placeholder__3,\n                                               $__placeholder__4, $__super);\n        }($__placeholder__5)","import {isPresent, BaseException} from 'facade/lang';\nimport {List, MapWrapper} from 'facade/collection';\nimport {TemplateElement} from 'facade/dom';\nimport {SelectorMatcher} from '../selector';\nimport {CssSelector} from '../selector';\n\nimport {DirectiveMetadata} from '../directive_metadata';\nimport {Template} from '../../annotations/annotations';\nimport {Component} from '../../annotations/annotations';\nimport {CompileStep} from './compile_step';\nimport {CompileElement} from './compile_element';\nimport {CompileControl} from './compile_control';\n\n/**\n * Parses the directives on a single element. Assumes ViewSplitter has already created\n * <template> elements for template directives.\n *\n * Fills:\n * - CompileElement#decoratorDirectives\n * - CompileElement#templateDirecitve\n * - CompileElement#componentDirective.\n *\n * Reads:\n * - CompileElement#propertyBindings (to find directives contained\n *   in the property bindings)\n * - CompileElement#variableBindings (to find directives contained\n *   in the property bindings)\n */\nexport class DirectiveParser extends CompileStep {\n  _selectorMatcher:SelectorMatcher;\n  constructor(directives:List<DirectiveMetadata>) {\n    this._selectorMatcher = new SelectorMatcher();\n    for (var i=0; i<directives.length; i++) {\n      var directiveMetadata = directives[i];\n      this._selectorMatcher.addSelectable(\n        CssSelector.parse(directiveMetadata.annotation.selector),\n        directiveMetadata\n      );\n    }\n  }\n\n  process(parent:CompileElement, current:CompileElement, control:CompileControl) {\n    var attrs = current.attrs();\n    var classList = current.classList();\n\n    var cssSelector = new CssSelector();\n    cssSelector.setElement(current.element.nodeName);\n    for (var i=0; i < classList.length; i++) {\n      cssSelector.addClassName(classList[i]);\n    }\n    MapWrapper.forEach(attrs, (attrValue, attrName) => {\n      cssSelector.addAttribute(attrName, attrValue);\n    });\n    if (isPresent(current.propertyBindings)) {\n      MapWrapper.forEach(current.propertyBindings, (expression, prop) => {\n        cssSelector.addAttribute(prop, expression.source);\n      });\n    }\n    if (isPresent(current.variableBindings)) {\n      MapWrapper.forEach(current.variableBindings, (value, name) => {\n        cssSelector.addAttribute(name, value);\n      });\n    }\n    // Note: We assume that the ViewSplitter already did its work, i.e. template directive should\n    // only be present on <template> elements any more!\n    var isTemplateElement = current.element instanceof TemplateElement;\n    this._selectorMatcher.match(cssSelector, (directive) => {\n      if (directive.annotation instanceof Template) {\n        if (!isTemplateElement) {\n          throw new BaseException('Template directives need to be placed on <template> elements or elements with template attribute!');\n        } else if (isPresent(current.templateDirective)) {\n          throw new BaseException('Only one template directive per element is allowed!');\n        }\n      } else if (isTemplateElement) {\n        throw new BaseException('Only template directives are allowed on <template> elements!');\n      } else if ((directive.annotation instanceof Component) && isPresent(current.componentDirective)) {\n        throw new BaseException('Only one component directive per element is allowed!');\n      }\n      current.addDirective(directive);\n    });\n  }\n}\n","Object.defineProperty($__placeholder__0, $__placeholder__1,\n        {get: function() {return $__placeholder__2}});"]}