{"version":3,"file":"/Users/deast/Angular/angular/modules/core/test/compiler/pipeline/property_binding_parser_spec.js","sources":["@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/12","property_binding_parser_spec.js","@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/9"],"names":[],"mappings":"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","sourceRoot":"/Users/deast/Angular/angular/modules/core/test/compiler/pipeline/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","import {describe, beforeEach, it, expect, iit, ddescribe, el} from 'test_lib/test_lib';\nimport {PropertyBindingParser} from 'core/compiler/pipeline/property_binding_parser';\nimport {CompilePipeline} from 'core/compiler/pipeline/compile_pipeline';\nimport {DOM} from 'facade/dom';\nimport {MapWrapper} from 'facade/collection';\n\nimport {Lexer, Parser} from 'change_detection/change_detection';\n\nexport function main() {\n  describe('PropertyBindingParser', () => {\n    function createPipeline() {\n      return new CompilePipeline([new PropertyBindingParser(new Parser(new Lexer()), null)]);\n    }\n\n    it('should detect [] syntax', () => {\n      var results = createPipeline().process(el('<div [a]=\"b\"></div>'));\n      expect(MapWrapper.get(results[0].propertyBindings, 'a').source).toEqual('b');\n    });\n\n    it('should detect bind- syntax', () => {\n      var results = createPipeline().process(el('<div bind-a=\"b\"></div>'));\n      expect(MapWrapper.get(results[0].propertyBindings, 'a').source).toEqual('b');\n    });\n\n    it('should detect interpolation syntax', () => {\n      // Note: we don't test all corner cases of interpolation as we assume shared functionality between text interpolation\n      // and attribute interpolation.\n      var results = createPipeline().process(el('<div a=\"{{b}}\"></div>'));\n      expect(MapWrapper.get(results[0].propertyBindings, 'a').source).toEqual('(b)');\n    });\n\n    it('should detect let- syntax', () => {\n      var results = createPipeline().process(el('<template let-a=\"b\"></template>'));\n      expect(MapWrapper.get(results[0].variableBindings, 'a')).toEqual('b');\n    });\n\n    it('should not allow let- syntax on non template elements', () => {\n      expect( () => {\n        createPipeline().process(el('<div let-a=\"b\"></div>'))\n      }).toThrowError('let-* is only allowed on <template> elements!');\n    });\n\n    it('should detect () syntax', () => {\n      var results = createPipeline().process(el('<div (click)=\"b()\"></div>'));\n      expect(MapWrapper.get(results[0].eventBindings, 'click').source).toEqual('b()');\n      // \"(click[])\" is not an expected syntax and is only used to validate the regexp\n      results = createPipeline().process(el('<div (click[])=\"b()\"></div>'));\n      expect(MapWrapper.get(results[0].eventBindings, 'click[]').source).toEqual('b()');\n\n    });\n\n    it('should detect on- syntax', () => {\n      var results = createPipeline().process(el('<div on-click=\"b()\"></div>'));\n      expect(MapWrapper.get(results[0].eventBindings, 'click').source).toEqual('b()');\n    });\n  });\n}","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function(m) {\n          $__placeholder__0\n        }","$__placeholder__0 = m.$__placeholder__1;"]}