{"version":3,"file":"/Users/deast/Angular/angular/modules/di/test/di/key_spec.js","sources":["@traceur/generated/TemplateParser/13","@traceur/generated/TemplateParser/12","key_spec.js","@traceur/generated/TemplateParser/22","@traceur/generated/TemplateParser/11","@traceur/generated/TemplateParser/10","@traceur/generated/TemplateParser/9"],"names":[],"mappings":"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","sourceRoot":"/Users/deast/Angular/angular/modules/di/test/di/","sourcesContent":["System.register($__placeholder__0, $__placeholder__1, function($__export) {\n          $__placeholder__2\n        });","var __moduleName = $__placeholder__0;","import {describe, iit, it, expect, beforeEach} from 'test_lib/test_lib';\nimport {Key, KeyRegistry} from 'di/di';\n\nexport function main() {\n\n  describe(\"key\", function () {\n    var registry;\n\n    beforeEach(function () {\n      registry = new KeyRegistry();\n    });\n\n    it('should be equal to another key if type is the same', function () {\n      expect(registry.get('car')).toBe(registry.get('car'));\n    });\n\n    it('should not be equal to another key if types are different', function () {\n      expect(registry.get('car')).not.toBe(registry.get('porsche'));\n    });\n\n    it('should return the passed in key', function () {\n      expect(registry.get(registry.get('car'))).toBe(registry.get('car'));\n    });\n\n    describe(\"metadata\", function () {\n      it(\"should assign metadata to a key\", function () {\n        var key = registry.get('car');\n\n        Key.setMetadata(key, \"meta\");\n\n        expect(key.metadata).toEqual(\"meta\");\n      });\n\n      it(\"should allow assigning the same metadata twice\", function () {\n        var key = registry.get('car');\n\n        Key.setMetadata(key, \"meta\");\n        Key.setMetadata(key, \"meta\");\n\n        expect(key.metadata).toEqual(\"meta\");\n      });\n\n      it(\"should throw when assigning different metadata\", function () {\n        var key = registry.get('car');\n\n        Key.setMetadata(key, \"meta1\");\n\n        expect(() => Key.setMetadata(key, \"meta2\")).toThrowError();\n      });\n    });\n  });\n}","\n        $__export($__placeholder__0, $__placeholder__1)\n      ","return {\n      setters: $__placeholder__0,\n      execute: $__placeholder__1\n    }","function(m) {\n          $__placeholder__0\n        }","$__placeholder__0 = m.$__placeholder__1;"]}